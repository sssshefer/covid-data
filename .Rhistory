library(tidyr)
library(ggplot2)
library(lubridate)
library(shiny)
library(bslib)
# Load data
tblBase <- read.csv("C:/Users/arkad/Desktop/XAMK/XAMK_3_YEAR/BigData/Covid-interactive-project/worldometer_coronavirus_daily_data.csv")
# ================================
# R Script Template For Lectures
# Lecture number and name
#
# https://github.com/rstudio/cheatsheets
# ================================
# 1. Setup
# Install necessary packages
# install.packages(c("dplyr", "tidyr", "lubridate", "ggplot2", "patchwork", "ggtext", "ragg", "magick", "readxl", "tidyverse", "hrbrthemes", "plotly", "babynames", "viridis", "gridExtra", "shiny", "bslib"))
# Load necessary packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(shiny)
library(bslib)
# Load data
tblBase <- read.csv("worldometer_coronavirus_daily_data.csv")
# Convert date column to Date type
tblBase$date <- as.Date(tblBase$date, format = "%Y-%m-%d")
# Define UI for app that draws a time series plot
ui <- page_sidebar(
# App title
title = "Covid Data Visualization",
# Sidebar panel for inputs
sidebar = sidebar(
# Input: Select country
selectInput(
inputId = "country",
label = "Select country:",
choices = unique(tblBase$country),
selected = "Afghanistan"
),
# Input: Select column for time series plot
selectInput(
inputId = "column",
label = "Select column to plot:",
choices = c("cumulative_total_cases", "daily_new_cases", "active_cases", "cumulative_total_deaths", "daily_new_deaths"),
selected = "daily_new_cases"
)
),
# Output: Time series plot
plotOutput(outputId = "timeSeriesPlot")
)
# Define server logic required to draw a time series plot
server <- function(input, output) {
# Time series plot of selected column data from tblBase for selected country
output$timeSeriesPlot <- renderPlot({
# Filter data for selected country
country_data <- tblBase %>% filter(country == input$country)
# Extract and convert the selected column to numeric, ignoring non-numeric values
column_data <- as.numeric(country_data[[input$column]])
# Filter out NA and infinite values after conversion to numeric
valid_data <- country_data %>%
mutate(selected_column = column_data) %>%
filter(!is.na(selected_column) & is.finite(selected_column))
# Check if there is valid data to plot
if (nrow(valid_data) == 0) {
plot.new()
text(0.5, 0.5, "No valid numeric data available in the selected column. Choose a different column.", cex = 1.5, col = "red")
} else {
# Create time series plot
ggplot(valid_data, aes(x = date, y = selected_column)) +
geom_line(color = "#007bc2") +
labs(x = "Date", y = input$column, title = paste(input$column, "over time for", input$country)) +
theme_minimal()
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# ================================
# R Script Template For Lectures
# Lecture number and name
#
# https://github.com/rstudio/cheatsheets
# ================================
# 1. Setup
# Install necessary packages
# install.packages(c("dplyr", "tidyr", "lubridate", "ggplot2", "patchwork", "ggtext", "ragg", "magick", "readxl", "tidyverse", "hrbrthemes", "plotly", "babynames", "viridis", "gridExtra", "shiny", "bslib"))
# Load necessary packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(shiny)
library(bslib)
# Load data
tblBase <- read.csv("worldometer_coronavirus_daily_data.csv")
# Convert date column to Date type
tblBase$date <- as.Date(tblBase$date, format = "%Y-%m-%d")
# Define UI for app that draws a time series plot
ui <- page_sidebar(
# App title
title = "Covid Data Visualization",
# Sidebar panel for inputs
sidebar = sidebar(
value_box(
title = "Value box",
value = 100
),
# Input: Select country
selectInput(
inputId = "country",
label = "Select country:",
choices = unique(tblBase$country),
selected = "Afghanistan"
),
# Input: Select column for time series plot
selectInput(
inputId = "column",
label = "Select column to plot:",
choices = c("cumulative_total_cases", "daily_new_cases", "active_cases", "cumulative_total_deaths", "daily_new_deaths"),
selected = "daily_new_cases"
)
),
# Output: Time series plot
plotOutput(outputId = "timeSeriesPlot")
)
# Define server logic required to draw a time series plot
server <- function(input, output) {
# Time series plot of selected column data from tblBase for selected country
output$timeSeriesPlot <- renderPlot({
# Filter data for selected country
country_data <- tblBase %>% filter(country == input$country)
# Extract and convert the selected column to numeric, ignoring non-numeric values
column_data <- as.numeric(country_data[[input$column]])
# Filter out NA and infinite values after conversion to numeric
valid_data <- country_data %>%
mutate(selected_column = column_data) %>%
filter(!is.na(selected_column) & is.finite(selected_column))
# Check if there is valid data to plot
if (nrow(valid_data) == 0) {
plot.new()
text(0.5, 0.5, "No valid numeric data available in the selected column. Choose a different column.", cex = 1.5, col = "red")
} else {
# Create time series plot
ggplot(valid_data, aes(x = date, y = selected_column)) +
geom_line(color = "#007bc2") +
labs(x = "Date", y = input$column, title = paste(input$column, "over time for", input$country)) +
theme_minimal()
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# ================================
# R Script Template For Lectures
# Lecture number and name
#
# https://github.com/rstudio/cheatsheets
# ================================
# 1. Setup
# Install necessary packages
# install.packages(c("dplyr", "tidyr", "lubridate", "ggplot2", "shiny", "bslib"))
# Load necessary packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(shiny)
library(bslib)
# Load data
tblBase <- read.csv("worldometer_coronavirus_daily_data.csv")
# Convert date column to Date type
tblBase$date <- as.Date(tblBase$date, format = "%Y-%m-%d")
# Define UI for app that draws a time series plot
ui <- page_sidebar(
# App title
title = "Covid Data Visualization",
# Sidebar panel for inputs
sidebar = sidebar(
# Display total new cases and new deaths as "value boxes"
div(
h4("New Positive Cases"),
textOutput("total_new_cases"),
style = "font-size: 20px; padding: 10px; background-color: #f0f0f0; margin-bottom: 10px; border-radius: 5px;"
),
div(
h4("New Deaths"),
textOutput("total_new_deaths"),
style = "font-size: 20px; padding: 10px; background-color: #f0f0f0; margin-bottom: 10px; border-radius: 5px;"
),
# Input: Select country
selectInput(
inputId = "country",
label = "Select country:",
choices = unique(tblBase$country),
selected = "Afghanistan"
),
# Input: Select column for time series plot
selectInput(
inputId = "column",
label = "Select column to plot:",
choices = c("cumulative_total_cases", "daily_new_cases", "active_cases", "cumulative_total_deaths", "daily_new_deaths"),
selected = "daily_new_cases"
)
),
# Output: Time series plot
plotOutput(outputId = "timeSeriesPlot")
)
# Define server logic required to draw a time series plot and calculate totals
server <- function(input, output) {
# Calculate total new cases and deaths for the latest date
output$total_new_cases <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
total_cases <- tblBase %>%
filter(date == latest_date) %>%
summarise(total_new_cases = sum(daily_new_cases, na.rm = TRUE)) %>%
pull(total_new_cases)
paste(total_cases)
})
output$total_new_deaths <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
total_deaths <- tblBase %>%
filter(date == latest_date) %>%
summarise(total_new_deaths = sum(daily_new_deaths, na.rm = TRUE)) %>%
pull(total_new_deaths)
paste(total_deaths)
})
# Time series plot of selected column data from tblBase for selected country
output$timeSeriesPlot <- renderPlot({
# Filter data for selected country
country_data <- tblBase %>% filter(country == input$country)
# Extract and convert the selected column to numeric, ignoring non-numeric values
column_data <- as.numeric(country_data[[input$column]])
# Filter out NA and infinite values after conversion to numeric
valid_data <- country_data %>%
mutate(selected_column = column_data) %>%
filter(!is.na(selected_column) & is.finite(selected_column))
# Check if there is valid data to plot
if (nrow(valid_data) == 0) {
plot.new()
text(0.5, 0.5, "No valid numeric data available in the selected column. Choose a different column.", cex = 1.5, col = "red")
} else {
# Create time series plot
ggplot(valid_data, aes(x = date, y = selected_column)) +
geom_line(color = "#007bc2") +
labs(x = "Date", y = input$column, title = paste(input$column, "over time for", input$country)) +
theme_minimal()
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# ================================
# R Script Template For Lectures
# Lecture number and name
#
# https://github.com/rstudio/cheatsheets
# ================================
# 1. Setup
# Install necessary packages
# install.packages(c("dplyr", "tidyr", "lubridate", "ggplot2", "shiny", "bslib"))
# Load necessary packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(shiny)
library(bslib)
# Load data
tblBase <- read.csv("worldometer_coronavirus_daily_data.csv")
# Convert date column to Date type
tblBase$date <- as.Date(tblBase$date, format = "%Y-%m-%d")
# Define UI for app that draws a time series plot
ui <- page_sidebar(
# App title
title = "Covid Data Visualization",
# Sidebar panel for inputs
sidebar = sidebar(
# Display total new cases and new deaths with dynamic percentage change
div(
h4("New Positive Cases"),
textOutput("total_new_cases"),
textOutput("cases_change"),
style = "font-size: 20px; padding: 10px; background-color: #f0f0f0; margin-bottom: 10px; border-radius: 5px;"
),
div(
h4("New Deaths"),
textOutput("total_new_deaths"),
textOutput("deaths_change"),
style = "font-size: 20px; padding: 10px; background-color: #f0f0f0; margin-bottom: 10px; border-radius: 5px;"
),
# Input: Select country
selectInput(
inputId = "country",
label = "Select country:",
choices = unique(tblBase$country),
selected = "Afghanistan"
),
# Input: Select column for time series plot
selectInput(
inputId = "column",
label = "Select column to plot:",
choices = c("cumulative_total_cases", "daily_new_cases", "active_cases", "cumulative_total_deaths", "daily_new_deaths"),
selected = "daily_new_cases"
)
),
# Output: Time series plot
plotOutput(outputId = "timeSeriesPlot")
)
# Define server logic required to draw a time series plot and calculate totals
server <- function(input, output) {
# Calculate total new cases for the latest date and compare with the previous day
output$total_new_cases <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
total_cases <- tblBase %>%
filter(date == latest_date) %>%
summarise(total_new_cases = sum(daily_new_cases, na.rm = TRUE)) %>%
pull(total_new_cases)
paste(total_cases)
})
output$cases_change <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
previous_date <- latest_date - 1
# Calculate new cases for the latest and previous dates
latest_cases <- tblBase %>% filter(date == latest_date) %>% summarise(total = sum(daily_new_cases, na.rm = TRUE)) %>% pull(total)
previous_cases <- tblBase %>% filter(date == previous_date) %>% summarise(total = sum(daily_new_cases, na.rm = TRUE)) %>% pull(total)
# Calculate percentage change
if (!is.na(previous_cases) && previous_cases != 0) {
change_percent <- ((latest_cases - previous_cases) / previous_cases) * 100
paste0(round(change_percent, 1), "% vs previous day (", previous_cases, ")")
} else {
"No data for previous day"
}
})
# Calculate total new deaths for the latest date and compare with the previous day
output$total_new_deaths <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
total_deaths <- tblBase %>%
filter(date == latest_date) %>%
summarise(total_new_deaths = sum(daily_new_deaths, na.rm = TRUE)) %>%
pull(total_new_deaths)
paste(total_deaths)
})
output$deaths_change <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
previous_date <- latest_date - 1
# Calculate new deaths for the latest and previous dates
latest_deaths <- tblBase %>% filter(date == latest_date) %>% summarise(total = sum(daily_new_deaths, na.rm = TRUE)) %>% pull(total)
previous_deaths <- tblBase %>% filter(date == previous_date) %>% summarise(total = sum(daily_new_deaths, na.rm = TRUE)) %>% pull(total)
# Calculate percentage change
if (!is.na(previous_deaths) && previous_deaths != 0) {
change_percent <- ((latest_deaths - previous_deaths) / previous_deaths) * 100
paste0(round(change_percent, 1), "% vs previous day (", previous_deaths, ")")
} else {
"No data for previous day"
}
})
# Time series plot of selected column data from tblBase for selected country
output$timeSeriesPlot <- renderPlot({
# Filter data for selected country
country_data <- tblBase %>% filter(country == input$country)
# Extract and convert the selected column to numeric, ignoring non-numeric values
column_data <- as.numeric(country_data[[input$column]])
# Filter out NA and infinite values after conversion to numeric
valid_data <- country_data %>%
mutate(selected_column = column_data) %>%
filter(!is.na(selected_column) & is.finite(selected_column))
# Check if there is valid data to plot
if (nrow(valid_data) == 0) {
plot.new()
text(0.5, 0.5, "No valid numeric data available in the selected column. Choose a different column.", cex = 1.5, col = "red")
} else {
# Create time series plot
ggplot(valid_data, aes(x = date, y = selected_column)) +
geom_line(color = "#007bc2") +
labs(x = "Date", y = input$column, title = paste(input$column, "over time for", input$country)) +
theme_minimal()
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# ================================
# R Script Template For Lectures
# Lecture number and name
#
# https://github.com/rstudio/cheatsheets
# ================================
# 1. Setup
# Install necessary packages
# install.packages(c("dplyr", "tidyr", "lubridate", "ggplot2", "shiny", "bslib"))
# Load necessary packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(shiny)
library(bslib)
# Load data
tblBase <- read.csv("worldometer_coronavirus_daily_data.csv")
# Convert date column to Date type
tblBase$date <- as.Date(tblBase$date, format = "%Y-%m-%d")
# Define UI for app that draws a time series plot
ui <- page_sidebar(
# App title
title = "Covid Data Visualization",
# Sidebar panel for inputs
sidebar = sidebar(
# Display total new cases and new deaths with dynamic percentage change
div(
h4("New Positive Cases"),
textOutput("total_new_cases"),
textOutput("cases_change"),
style = "font-size: 20px; padding: 10px; background-color: #f0f0f0; margin-bottom: 10px; border-radius: 5px;"
),
div(
h4("New Deaths"),
textOutput("total_new_deaths"),
textOutput("deaths_change"),
style = "font-size: 20px; padding: 10px; background-color: #f0f0f0; margin-bottom: 10px; border-radius: 5px;"
),
# Input: Select country
selectInput(
inputId = "country",
label = "Select country:",
choices = unique(tblBase$country),
selected = "Afghanistan"
),
# Input: Select column for time series plot
selectInput(
inputId = "column",
label = "Select column to plot:",
choices = c("cumulative_total_cases", "daily_new_cases", "active_cases", "cumulative_total_deaths", "daily_new_deaths"),
selected = "daily_new_cases"
)
),
# Output: Time series plot
plotOutput(outputId = "timeSeriesPlot")
)
# Define server logic required to draw a time series plot and calculate totals
server <- function(input, output) {
# Calculate total new cases for the latest date and compare with the previous day
output$total_new_cases <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
total_cases <- tblBase %>%
filter(date == latest_date) %>%
summarise(total_new_cases = sum(daily_new_cases, na.rm = TRUE)) %>%
pull(total_new_cases)
paste(total_cases)
})
output$cases_change <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
previous_date <- latest_date - 1
# Calculate new cases for the latest and previous dates
latest_cases <- tblBase %>% filter(date == latest_date) %>% summarise(total = sum(daily_new_cases, na.rm = TRUE)) %>% pull(total)
previous_cases <- tblBase %>% filter(date == previous_date) %>% summarise(total = sum(daily_new_cases, na.rm = TRUE)) %>% pull(total)
# Calculate percentage change
if (!is.na(previous_cases) && previous_cases != 0) {
change_percent <- ((latest_cases - previous_cases) / previous_cases) * 100
paste0(round(change_percent, 1), "% vs previous day (", previous_cases, ")")
} else {
"No data for previous day"
}
})
# Calculate total new deaths for the latest date and compare with the previous day
output$total_new_deaths <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
total_deaths <- tblBase %>%
filter(date == latest_date) %>%
summarise(total_new_deaths = sum(daily_new_deaths, na.rm = TRUE)) %>%
pull(total_new_deaths)
paste(total_deaths)
})
output$deaths_change <- renderText({
latest_date <- max(tblBase$date, na.rm = TRUE)
previous_date <- latest_date - 1
# Calculate new deaths for the latest and previous dates
latest_deaths <- tblBase %>% filter(date == latest_date) %>% summarise(total = sum(daily_new_deaths, na.rm = TRUE)) %>% pull(total)
previous_deaths <- tblBase %>% filter(date == previous_date) %>% summarise(total = sum(daily_new_deaths, na.rm = TRUE)) %>% pull(total)
# Calculate percentage change
if (!is.na(previous_deaths) && previous_deaths != 0) {
change_percent <- ((latest_deaths - previous_deaths) / previous_deaths) * 100
paste0(round(change_percent, 1), "% vs previous day (", previous_deaths, ")")
} else {
"No data for previous day"
}
})
# Time series plot of selected column data from tblBase for selected country
output$timeSeriesPlot <- renderPlot({
# Filter data for selected country
country_data <- tblBase %>% filter(country == input$country)
# Extract and convert the selected column to numeric, ignoring non-numeric values
column_data <- as.numeric(country_data[[input$column]])
# Filter out NA and infinite values after conversion to numeric
valid_data <- country_data %>%
mutate(selected_column = column_data) %>%
filter(!is.na(selected_column) & is.finite(selected_column))
# Check if there is valid data to plot
if (nrow(valid_data) == 0) {
plot.new()
text(0.5, 0.5, "No valid numeric data available in the selected column. Choose a different column.", cex = 1.5, col = "red")
} else {
# Create time series plot
ggplot(valid_data, aes(x = date, y = selected_column)) +
geom_line(color = "#007bc2") +
labs(x = "Date", y = input$column, title = paste(input$column, "over time for", input$country)) +
theme_minimal()
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
